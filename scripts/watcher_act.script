-- Red75 (c) 2008
-- Marauder scheme v 1.1
-- Part of AMK MOD

evid_see_stuff=6931
evid_near_stuff=evid_see_stuff+1
evid_see_body=evid_see_stuff+2
evid_position_corrected=evid_see_stuff+3

actid_reach_item=evid_see_stuff
actid_grab_item=evid_see_stuff+1
actid_grab_body=evid_see_stuff+2
actid_correct_position=evid_see_stuff+3


local ini = system_ini()

function do_not_touch(item)
	if item and olr.bad_items[item:section()] and olr.bad_items[item:section()] == true then
 		return true
	else
		return false
	end	
end

function cannot_take_that(npc)
	if npc then
		if npc:character_community()=="zombied" or
		   npc:character_community()=="trader" or 
		   npc:character_community()=="neutral" or 
		   string.find(npc:name(), "doctor") or 
		   string.find(npc:name(), "doktor") or		   
		   string.find(npc:name(), "mil_stalker") or 
		   string.find(npc:name(), "ecolog") or 
		   string.find(npc:name(), "scientist") or
		   string.find(npc:name(), "lvl16_generators_staler_undead_olr_0002") or
		   string.find(npc:name(), "lvl1_escape_stalker_0038") or
		   string.find(npc:name(), "mil_freedom_member0021") then
  
                   return true 
                   else 
                   return false 

		end		
	end
	return false
end

function max_weight(npc)
	local total_weight = 0.0
	if npc then
		npc:iterate_inventory(function (dummy, item)
			if item then
				local section = item:section()
				local item_wt = ini:r_float(section,"inv_weight")
				total_weight = total_weight + item_wt
			end
		end, nil)
	end
	return total_weight
end

function bad_situation(npc)
	if npc then
		local actsch=db.storage[npc:id()].active_scheme  --- получим активную схему
		local posobj = npc:position()  --- получим позицию непися
		local actorpos
		
		
		if db.actor then
			actorpos = db.actor:position()  --- получим позицию актора		
		end
		
		if actsch then
			if db.storage[npc:id()][actsch].no_loot then return true end  --- если активная схема запрещает лут, возвращаем низзя
		end
		
		if db.storage[npc:id()].active_scheme == "test" then return true end                          --- если посланы игрой бежать куда-то
		--// if db.storage[npc:id()].active_scheme == "walker" then return true end                        --- если посланы игрой бежать куда-то
		if db.storage[npc:id()].active_scheme == "remark" then return true end                        --- если играем в скриптовой сценке
		if db.storage[npc:id()].active_scheme == "combat" then return true end                        --- если сражаемся
		if db.storage[npc:id()].active_scheme == "wounded" then return true end                       --- если отыгрываем тяжелораненного
		if db.storage[npc:id()].active_scheme == "actor_dialogs" then return true end                 --- если говорим с актором
		
		
		if max_weight(npc) > 70.0 then return true end --- если непись и так уже нагрёб дохренища вещей
		if bad_danger(npc) then return true end --- если мы в опасности
		if not npc:alive() then return true end --- если мы трупик
		if cannot_take_that(npc) then return true end --- если мы не той фракции
		if actorpos and posobj:distance_to(actorpos) < 3 then return true end --- если актор ближе 3 метров, пытается пообщаццо
		if npc:best_enemy() then return true end --- если рядом враг
		if xr_wounded.is_wounded(npc) then return true end  --- если мы ранены и просим помощи
  	end
	return false   
end


-- Вызывает closure раз в period, obj[var] хранит время следующего срабатывания
function timed(obj,var,period,closure)
	if obj[var] and obj[var]<time_global() then
		obj[var]=time_global()+period
		closure()
	elseif not obj[var] then
		obj[var]=time_global()+period
--		closure()
	end
end

function trigger_timed(obj,var)
	obj[var]=time_global()
end

local disabled_objects={}

local corpse_checked={} -- true - has loot, false - hasn't loot, nil - not checked

function checkCorpse(obj)
	if (IsStalker(obj) or IsMonster(obj)) and obj:alive()==false then
		if corpse_checked[obj:id()]~=nil then
			return corpse_checked[obj:id()]
		end
		local cnt=0
		obj:iterate_inventory(function (dummy, item)
        if item:section()~="bolt" then
          cnt=cnt+1
        end
			end, nil)
		corpse_checked[obj:id()]=cnt>0
		return corpse_checked[obj:id()]
	end
	return false
end

local valuable_clsid={
    [clsid.art_bast_artefact]=true,
    [clsid.art_black_drops]=true,
    [clsid.art_dummy]=true,
    [clsid.art_electric_ball]=true,
    [clsid.art_faded_ball]=true,
    [clsid.art_galantine]=true,
    [clsid.art_gravi]=true,
    [clsid.art_gravi_black]=true,
    [clsid.art_mercury_ball]=true,
    [clsid.art_needles]=true,
    [clsid.art_rusty_hair]=true,
    [clsid.art_thorn]=true,
    [clsid.art_zuda]=true,
    [clsid.artefact_s]=true,
    [clsid.device_detector_simple]=true,
    [clsid.device_pda]=true,
    [clsid.device_torch_s]=true,
    [clsid.equ_exo]=true,
    [clsid.equ_military]=true,
    [clsid.equ_scientific]=true,
    [clsid.equ_stalker_s]=true,
    [clsid.obj_antirad]=true,
    [clsid.obj_attachable]=true,
    [clsid.obj_bandage]=true,
    [clsid.obj_bolt]=true,
    [clsid.obj_bottle]=true,
    [clsid.obj_food]=true,
    [clsid.obj_medkit]=true,
    [clsid.wpn_ak74_s]=true,
    [clsid.wpn_ammo]=true,
    [clsid.wpn_ammo_m209]=true,
    [clsid.wpn_ammo_og7b]=true,
    [clsid.wpn_ammo_vog25]=true,
    [clsid.wpn_binocular_s]=true,
    [clsid.wpn_bm16_s]=true,
    [clsid.wpn_fn2000]=true,
    [clsid.wpn_fort]=true,
    [clsid.wpn_groza_s]=true,
    [clsid.wpn_hpsa_s]=true,
    [clsid.wpn_knife_s]=true,
    [clsid.wpn_lr300_s]=true,
    [clsid.wpn_pm_s]=true,
    [clsid.wpn_rg6_s]=true,
    [clsid.wpn_rpg7_s]=true,
    [clsid.wpn_scope_s]=true,
    [clsid.wpn_shotgun_s]=true,
    [clsid.wpn_silencer]=true,
    [clsid.wpn_svd_s]=true,
    [clsid.wpn_svu_s]=true,
    [clsid.wpn_usp45_s]=true,
    [clsid.wpn_val_s]=true,
    [clsid.wpn_vintorez_s]=true,
    [clsid.wpn_walther_s]=true,
    [clsid.wpn_wmagaz]=true,
    [clsid.wpn_wmaggl]=true
}

local obj_owner={}

function bgwith(str,ptr)
	local ps=string.find(str,ptr)
	return ps~=nil and ps==1
end

function isValuable(obj)
	local sec=obj:section()
	if valuable_clsid[obj:clsid()] then
		return true, false
	end
	return bgwith(sec,"af_") or bgwith(sec,"ammo_") or bgwith(sec,"wpn_") or bgwith(sec,"energy_") or checkCorpse(obj), IsStalker(obj) or IsMonster(obj)
end

function objValue(obj)
	local sec=obj:section()
  local multiplier=1
  if bgwith(sec,"ammo_") then
    multiplier=30
  elseif sec=="vodka" then
    multiplier=20
  end
	if ini:section_exist(sec) and ini:line_exist(sec,"cost") then
		return ini:r_float(sec,"cost")*multiplier
	end
	return 0
end

function claimGObject(npc,st,obj)
	if st.grabitemid then
		obj_owner[st.grabitemid]=nil
	end
	st.grabitemid=obj:id()
	obj_owner[obj:id()]=npc:id()
end

function freeGObject(st)
	if st.grabitemid then
		obj_owner[st.grabitemid]=nil
		st.grabitemid=nil
	end
end

function clearGObject(st)
	st.grabitemid=nil
end

function getGObject(st)
	if st.grabitemid then
		local ret=level.object_by_id(st.grabitemid)
		if ret==nil then
			st.grabitemid=nil
		end
		return ret
	end
	return nil
end

function mypGObject(npc,st)
	return st.grabitemid~=nil and obj_owner[st.grabitemid]~=nil and obj_owner[st.grabitemid]==npc:id()
end

class "ev_see_stuff" (property_evaluator)

function ev_see_stuff:__init(st,name) super(nil, name)
	self.st=st
end

local bad_dangers={
  [danger_object.hit]=true,
  [danger_object.attacked]=true,
  [danger_object.enemy_sound]=true,
  [danger_object.attack_sound]=true,
  [danger_object.bullet_ricochet]=true,
  [danger_object.grenade]=true,
  [danger_object.entity_death]=true,
  [danger_object.enemy_sound]=true
  }
  
local inertion_time=30000

function bad_danger(npc)
  local danger=npc:best_danger()
  if danger then
    return bad_dangers[danger:type()] and time_global()-danger:time()<inertion_time
  end
  return false
end

function ev_see_stuff:evaluate()
if self.object:best_enemy() then return false end
	local res=getGObject(self.st)~=nil
	local npc=self.object
  local actsch=db.storage[npc:id()].active_scheme
  if actsch and db.actor then
    xr_logic.try_switch_to_another_section(npc, db.storage[npc:id()][actsch], db.actor)
  end
	local act_sec=db.storage[npc:id()].active_section or ""
   if bad_situation(npc) then
      if res then
         freeGObject(self.st)
		 -- log1(npc:name() .. " distracted. sect "..act_sec,"grb")
      end
      return false
   end	
  local dist_limit=1000
  if bgwith(act_sec,"camper") then
    dist_limit=5
  end
	local busy=bgwith(act_sec,"walker") or bgwith(act_sec,"combat") or bgwith(act_sec,"danger") -- or npc:best_danger()
	if res and self.st.block_search then
	  -- NPC собрался взять вещь. Временно прекратим поиск.
		return true
	end
	timed(self.st,"tm1",5000+math.random()*10000,
		function ()
			local min_dist=100000
			local function check_item(o)
				local obj=o:object()
				if obj_owner[obj:id()] and (level.object_by_id(obj_owner[obj:id()])==nil or level.object_by_id(obj_owner[obj:id()]):alive()==false) then
					obj_owner[obj:id()]=nil
				end
				if (not self.st.disabled_objects[obj:id()]) and (obj:parent()==nil or not IsStalker(obj:parent())) and 
           (obj_owner[obj:id()]==nil or obj_owner[obj:id()]==npc:id()) and npc:accessible(obj:level_vertex_id()) and
           (db.actor==nil or db.actor:alive()==false or db.actor:position():distance_to_sqr(obj:position())>6) then
					local valuable,corpse=isValuable(obj)
					if valuable then 
						local value=3000
						if not corpse then
							value=objValue(obj)
						end
						if value<=0 then value=0 end
						local max_dist=5+math.sqrt(value)
						if busy then
							max_dist=max_dist/5
						end
						local dist=level.vertex_position(obj:level_vertex_id()):distance_to(npc:position())
            local corrected_dist=dist
            if dist>5 then
              corrected_dist=5+(dist-5)/math.sqrt(value)
            end
						if dist<max_dist and corrected_dist<min_dist and dist<dist_limit then
              min_dist=corrected_dist
							claimGObject(npc,self.st,obj)
							res=true
						end
					end
				end
			end -- function check_item
			for o in npc:memory_visible_objects() do
				check_item(o)
			end
			for o in npc:memory_sound_objects() do
				check_item(o)
			end
--			for o in npc:not_yet_visible_objects() do
--				check_item(o)
--			end
		end
	)
	return res
end

class "ev_near_stuff" (property_evaluator)

function ev_near_stuff:__init(st,name) super(nil, name)
	self.st=st
end

function ev_near_stuff:evaluate()
if self.object:best_enemy() then return false end
	local npc=self.object
	local gi=getGObject(self.st)
  if gi then
    if self.st.dest_lvid then
      return npc:level_vertex_id()==self.st.dest_lvid
    end
    return level.vertex_position(gi:level_vertex_id()):distance_to_sqr(npc:position())<1
	end
	return false
end

class "ev_see_body" (property_evaluator)

function ev_see_body:__init(st) super(nil, "ev_see_body")
	self.st=st
end

function ev_see_body:evaluate()
if self.object:best_enemy() then return false end
		local npc=self.object
		local gi=getGObject(self.st)
		if gi then
			return IsStalker(gi) or IsMonster(gi)
		end	
  		return false
end

class "ev_position_corrected" (property_evaluator)

function ev_position_corrected:__init(st) super(nil, "ev_position_corrected")
	self.st=st
end

function ev_position_corrected:evaluate()
	local npc=self.object
  return self.st.position_corrected==true
end


class "act_grab_item" (action_base)

function act_grab_item:__init (action_name, st) super (nil, action_name)
  self.st = st
end

function act_grab_item:initialize()
	action_base.initialize(self)
	local npc=self.object
	npc:set_item(object.idle,nil)
	npc:set_movement_type(move.run)
	npc:set_mental_state(anim.danger)
	npc:set_body_state(move.crouch)
  	npc:movement_enabled(true)
	local gi=getGObject(self.st)
--	if gi then npc:set_sight(gi,true,true) end
	npc:set_sight(look.danger,nil,0)
	self.st.block_search=true
	if gi then
    if(IsStalker(gi) or IsMonster(gi)) then
  		self.tt=time_global()+3000
  	else
  		self.tt=time_global()+1000
    	utils.send_to_nearest_accessible_vertex(npc,gi:level_vertex_id())
    end
    
	end
	--npc:set_dest_level_vertex_id(1)
	self.force=vector():set(0,0,0)
end

function act_grab_item:execute()
	action_base.execute(self)
	local npc=self.object
	local gi=getGObject(self.st)
  if not gi then
    return
  end
	if self.tt<time_global() then
		if gi and gi:parent()==nil and not do_not_touch(gi) then
			gi:transfer_item(gi,npc)
			--log1("transfer 1  - "..gi:name().." --  "..npc:name().." ")
			this.on_take(gi,npc)
                        --news_manager.send_tip(db.actor, " transfer 1  - "..gi:name().." --  "..npc:name().." ")
			npc:enable_memory_object(gi,false)
		end
		-- Тут нельзя освобождать объект. transfer_item выполняется асинхронно. Поэтому делаем clearGObject
		clearGObject(self.st)
		--freeGObject(self.st) 
	end
end

function act_grab_item:finalize()
	local npc=self.object
	self.st.block_search=nil
	npc:set_sight(look.danger,nil,0)
	trigger_timed(self.st,"tm1")
  	self.st.dest_lvid=nil -- Очищаем скорректированную точку назначения
	action_base.finalize(self)
end

class "act_grab_body" (action_base)

function act_grab_body:__init (st) super (nil, "act_grab_body")
  self.st = st
end

local mutant_reac = {

[1] = [[characters_voice\human_01\stalker\reactions\dead_mutant\dead_mutant_1]],
[2] = [[characters_voice\human_01\stalker\reactions\dead_mutant\dead_mutant_2]],
[3] = [[characters_voice\human_01\stalker\reactions\dead_mutant\dead_mutant_3]]

}

local dead_neutral_reac = {

[1] = [[characters_voice\human_01\stalker\reactions\dead_neutral\dead_neutral_1]],
[2] = [[characters_voice\human_01\stalker\reactions\dead_neutral\dead_neutral_2]],
[3] = [[characters_voice\human_01\stalker\reactions\dead_neutral\dead_neutral_3]]

}

local dead_friend_reac = {

[1] = [[characters_voice\human_01\stalker\reactions\dead_friend\dead_friend_1]],
[2] = [[characters_voice\human_01\stalker\reactions\dead_friend\dead_friend_2]],
[3] = [[characters_voice\human_01\stalker\reactions\dead_friend\dead_friend_3]]

}

local dead_enemy_reac = {

[1] = [[characters_voice\human_01\stalker\reactions\dead_enemy\dead_enemy_1]],
[2] = [[characters_voice\human_01\stalker\reactions\dead_enemy\dead_enemy_2]],
[3] = [[characters_voice\human_01\stalker\reactions\dead_enemy\dead_enemy_3]],
[4] = [[characters_voice\human_01\stalker\reactions\dead_enemy\dead_enemy_4]],
[5] = [[characters_voice\human_01\stalker\reactions\dead_enemy\dead_enemy_5]],
[6] = [[characters_voice\human_01\stalker\reactions\dead_enemy\dead_enemy_6]]

}


function act_grab_body:initialize()
	action_base.initialize(self)
	local npc=self.object
	local gi=getGObject(self.st)
	self.st.block_search=true
	if gi then
 		self.tt=time_global()+6000
    		state_mgr.set_state(npc,"search",nil,nil,{look_object=gi})
  	else
    		self.st.dest_lvid=nil
	end

	if gi and gi:is_stalker() then
		if npc:relation(gi) == game_object.enemy then
			local snd_name = dead_enemy_reac[math.random(1,6)]
			if snd_name then
				local snd_obj = xr_sound.get_safe_sound_object(snd_name)
				if snd_obj and not snd_obj:playing() then
					snd_obj:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
				end
			end
			--news_manager.send_tip(db.actor, " snd obisk SND 1 ENEMY -  "..npc:name().."  to "..gi:name().."  ")
		end
		if npc:relation(gi) == game_object.neutral then
			local snd_name = dead_neutral_reac[math.random(1,3)]
			if snd_name then
				local snd_obj = xr_sound.get_safe_sound_object(snd_name)
				if snd_obj and not snd_obj:playing() then
					snd_obj:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
				end
			end
			--news_manager.send_tip(db.actor, " snd obisk SND 1 neutral -  "..npc:name().."  to "..gi:name().."  ")
		end
		if npc:relation(gi) == game_object.friend then
			local snd_name = dead_friend_reac[math.random(1,3)]
			if snd_name then
				local snd_obj = xr_sound.get_safe_sound_object(snd_name)
				if snd_obj and not snd_obj:playing() then
					snd_obj:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
				end
			end
			--news_manager.send_tip(db.actor, " snd obisk SND 1 friend -  "..npc:name().."  to "..gi:name().."  ")
		end
	end
	if gi and gi:is_custom_monster() and not gi:is_stalker() then
		local snd_name = mutant_reac[math.random(1,3)]
		if snd_name then
			local snd_obj = xr_sound.get_safe_sound_object(snd_name)
			if snd_obj and not snd_obj:playing() then
				snd_obj:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
			end
		end
		--news_manager.send_tip(db.actor, " snd obisk SND 1 MUTANT -  "..npc:name().."  to "..gi:name().."  ")
	end

end

function act_grab_body:execute()
	action_base.execute(self)
	local npc=self.object
	local gi=getGObject(self.st)
  	if not gi then
    		self.st.dest_lvid=nil
    		return
  	end
	if self.tt<time_global() then
		if gi and gi:parent()==nil then
      gi:iterate_inventory(function (d,item)
          if item:section()~="bolt" and not do_not_touch(item) and not string.find(item:name(),"^mutant_") then
            gi:transfer_item(item,npc)
		this.on_take(item,npc)
	    --log1("transfer 2  - trup "..gi:name().."  -- "..item:name().."  -- taker "..npc:name().." ")
            --news_manager.send_tip(db.actor, " transfer 2  - "..gi:name().."  -- "..item:name().."  -- "..npc:name().." ")
          end
        end, nil)
      corpse_checked[gi:id()]=false
		end
		-- Тут нельзя освобождать объект. transfer_item выполняется асинхронно. Поэтому делаем clearGObject
		clearGObject(self.st)
	end
end

function act_grab_body:finalize()
	local npc=self.object
	local gi=getGObject(self.st)
	self.st.block_search=nil
	trigger_timed(self.st,"tm1")
  	self.st.dest_lvid=nil -- Очищаем скорректированную точку назначения
	action_base.finalize(self)


--[[
	--if gi:is_stalker() then
		local rnd = math.random(1,5)
		if rnd == 1 then
			xr_sound.set_sound_play(self.object, "prof_fu_nu_i_gadost")
		elseif rnd == 2 then
			xr_sound.set_sound_play(self.object, "prof_jizn_nalajivaetsya")
		elseif rnd == 3 then
			xr_sound.set_sound_play(self.object, "prof_habara_naberu")
		elseif rnd == 4 then
			xr_sound.set_sound_play(self.object, "prof_nemnogo_habara")
		elseif rnd == 5 then
			xr_sound.set_sound_play(self.object, "prof_da_skudnovato")
		end
	--end]]


end

local no_levels = {
	["lvl_mars"] = true,
	["lvl_nightmare"] = true,
	["lvl14_stancia"] = true,
	["lvl15_sarcofag"] = true,
	["lvl16_generators"] = true
}

local excluded_comms = {			-- запретные коммунити
	["zombied"] = true,
	["sin"] = true,
	["military"] = true,
	["bandit"] = true,
	["voenstals"] = true,
	["trader"] = true
}

local flg = false

function on_take(item,npc)

	if item:is_weapon_magazined() then
		--news_main.on_find_weapon(npc, item)
	end
	if item:is_artefact() then
		--news_main.on_find_artefact(npc, item)
	end

        if no_levels[level.name()] then
		return
	end

        if excluded_comms[npc:character_community()] then
    		return
  	end

	local rndd = math.random(1,5)
	if item:cost() > 150 and item:cost() < 550 and rndd == 1 then

		local text_phrase = {"Lucky me. Found it. "..item:get_name().."", 
		"Not bad. Found it. "..item:get_name().."", 
		"Hmm, that'll come in handy. Found it. "..item:get_name()..""}
		local news_text = "%c[255,245,118,54]"..game.translate_string(npc:character_name()).."\\n".."%c[255,245,118,54]"..game.translate_string(text_phrase[math.random(#text_phrase)])
		db.actor:give_game_news(news_text, "ui\\ui_icons_task", Frect():set(400,100,50,50),1*500, 15000)

	elseif item:cost() > 550 and item:cost() < 1550 and math.random(1,5) == 1 then

		local text_phrase = {"Wow, that's not bad. Found it. "..item:get_name().."", 
		"Oh, man, that's lucky. Found it. "..item:get_name().."", 
		"That's lucky. I found it. "..item:get_name()..""}
		local news_text = "%c[255,245,118,54]"..game.translate_string(npc:character_name()).."\\n".."%c[255,245,118,54]"..game.translate_string(text_phrase[math.random(#text_phrase)])
		db.actor:give_game_news(news_text, "ui\\ui_icons_task", Frect():set(400,100,50,50),1*500, 15000)
		
	elseif item:cost() > 1550 and item:cost() < 9550 and math.random(1,5) == 1 then
	
		local text_phrase = {"Oh, my gosh. I found it. "..item:get_name().."", 
		"Wow. I found it. "..item:get_name().."", 
		"That's my lucky day. Found it. "..item:get_name()..""}
		local news_text = "%c[255,245,118,54]"..game.translate_string(npc:character_name()).."\\n".."%c[255,245,118,54]"..game.translate_string(text_phrase[math.random(#text_phrase)])
		db.actor:give_game_news(news_text, "ui\\ui_icons_task", Frect():set(400,100,50,50),1*500, 15000)

	end
	local cnt = 0
	npc:iterate_inventory( function(_, item)
	if item then
		if item:is_weapon() or item:is_artefact() or item:is_ammo() then
				cnt = cnt+1
				--log1(" cnt "..cnt.."")
			end
		end
	end )
	if cnt > 10 then
		local rnd = math.random(1,5)
		if rnd == 3 then
			if flg == false then
				flg = true
				npc:enable_trade()
				local sobj = alife():object(npc:name())
				local pos = news_main.get_point_description(alife():level_name(game_graph():vertex(sobj.m_game_vertex_id):level_id()), vector():set(sobj.position.x,sobj.position.y,sobj.position.z))
				--news_manager.send_tip(db.actor, ""..""..npc:character_name()..":".."\\n".."Кто хочет поторговать? Я нахожусь тут - "..pos..". ".."".."\n", 8, "default", 30000)

				local text_phrase = {"Who wants to trade? I'm right here-- "..pos.."", 
				"If anyone wants to trade, I'm right here-- "..pos.."", 
				"I got some loot for sale. Look for me here-- "..pos..""}
				local news_text = "%c[255,245,118,54]"..game.translate_string(npc:character_name()).."\\n".."%c[255,245,118,54]"..game.translate_string(text_phrase[math.random(#text_phrase)])
				db.actor:give_game_news(news_text, "ui\\ui_icons_task", Frect():set(400,100,50,50),4*1000, 15000)

			end
		end
		xrs_trade.on_sms_trade_otvet(npc)
	end
	cnt = 0
end

function correct_position(gi,npc)
  if IsStalker(gi) then
    -- Вычисляем вектор разницы между координатами кости и level vertex. Пытаемся найти level vertex наиболее близкий к кости
    local diff=gi:bone_position("bip01_head"):sub(level.vertex_position(gi:level_vertex_id()))
    local len=diff:magnitude()
    local diffp=vector():set(diff.z,0,-diff.x):mul(0.5)
    -- Сдвигаем целевую точку вбок, чтобы непись не залазил ногами в труп
    diff:add(diffp)
    return npc:vertex_in_direction(gi:level_vertex_id(),diff,len)
  else
    return gi:level_vertex_id()
  end
end

class "act_reach_item" (action_base)

function act_reach_item:__init (action_name, st) super (nil, action_name)
  self.st = st
end

function act_reach_item:initialize()
	action_base.initialize(self)
	local npc=self.object
	local gi=getGObject(self.st)
  self.st.dest_lvid=nil
  self.tgt_lvid=0
	if gi then
		if npc:accessible(gi:level_vertex_id()) then
		  npc:set_detail_path_type(move.curve)
		  npc:set_path_type(game_object.level_path)
      if npc:best_danger() and time_global()-npc:best_danger():time()<inertion_time then
        npc:set_mental_state(anim.danger)
        npc:set_body_state(move.crouch)
        npc:set_movement_type(move.run)
--        npc:set_sight(gi,true,true)
      else
        npc:set_body_state(move.standing)
        npc:set_mental_state(anim.free)
        npc:set_movement_type(move.run)
      end
      npc:movement_enabled(true)
      if npc:best_weapon() and isWeapon(npc:best_weapon()) then
--        npc:set_item(object.idle,npc:best_weapon())
      end
			npc:set_sight(look.danger,nil,0)
      self.st.dest_lvid=correct_position(gi,npc) --gi:level_vertex_id()
      self.tgt_lvid=gi:level_vertex_id()
      npc:set_dest_level_vertex_id(self.st.dest_lvid)
		else
			freeGObject(self.st)
		end
	end
	self.ct=time_global()
	self.clvid=npc:level_vertex_id()
  self.st.position_corrected=false
end

function act_reach_item:execute()
	action_base.execute(self)
	local npc=self.object
	local gi=getGObject(self.st)
	if gi and gi:parent()~=nil then
		--news_manager.send_tip(db.actor, "Эй! Куда чужое берёшь?!")
		-- ГГ забрал вкусность. Можно добавить наезд на ГГ.
    self.st.dest_lvid=nil
		freeGObject(self.st)
	elseif gi then
		if self.clvid==npc:level_vertex_id() then
			if time_global()-self.ct>10000 then
			-- не можем добраться до нняки
				self.st.disabled_objects[gi:id()]=true
        self.st.dest_lvid=nil
				freeGObject(self.st)
			end
		else
			self.clvid=npc:level_vertex_id()
			self.ct=time_global()
		end
    if self.tgt_lvid~=gi:level_vertex_id() then
      self.tgt_lvid=gi:level_vertex_id()
      self.st.dest_lvid=correct_position(gi,npc) -- gi:level_vertex_id()
			npc:set_dest_level_vertex_id(self.st.dest_lvid)
    end
				--npc:set_sight(gi)
	end
end

function add_to_binder(object, char_ini, scheme, section, st)
	local npc=object
	st.disabled_objects={}
  local manager = object:motivation_action_manager()

  local zombi=npc:character_community()=="zombied" or npc:character_community()=="trader" or
          npc:character_community()=="neutral" or npc:name()=="mil_stalker0012" or npc:name()=="yantar_ecolog_general" or -- сумашедший на милитари и Сахаров
          npc:name()=="lvl16_generators_staler_undead_olr" -- ген. напарник
	
	local prop_idlecombat=xr_evaluators_id.state_mgr + 3
  local prop_contact=xr_evaluators_id.stohe_meet_base + 1
  -- Evaluators
	if npc:story_id()~=4294967296 or zombi then
	  manager:add_evaluator(evid_see_stuff, property_evaluator_const(false))
	  manager:add_evaluator(evid_see_body, property_evaluator_const(false))
	  manager:add_evaluator(evid_near_stuff, property_evaluator_const(false))
	  manager:add_evaluator(evid_position_corrected, property_evaluator_const(false))
	else
	  manager:add_evaluator(evid_see_stuff, ev_see_stuff(st,"ev_see_stuff"))
	  manager:add_evaluator(evid_see_body, ev_see_body(st))
	  manager:add_evaluator(evid_position_corrected, ev_position_corrected(st))
	  manager:add_evaluator(evid_near_stuff, ev_near_stuff(st,"ev_near_stuff"))
	  -- Actions
	  local action = act_grab_item("act_grab_item", st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
--		action:add_precondition(world_property(stalker_ids.property_danger,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
--	  action:add_precondition(world_property(blowout_scheme.evid_anomaly,false))
--	  action:add_precondition(world_property(blowout_scheme.evid_blowout,false))
	  action:add_precondition(world_property(evid_see_stuff,true))
	  action:add_precondition(world_property(evid_near_stuff,true))
	  action:add_precondition(world_property(evid_see_body,false))
	  action:add_precondition(world_property(prop_idlecombat,true)) -- отключим стэйт менеджер
	  action:add_effect(world_property(evid_near_stuff, false))
	  action:add_effect(world_property(evid_see_stuff, false))
	  action:add_effect(world_property(evid_see_body,true)) -- для переключения на обыск трупа
	  manager:add_action (actid_grab_item, action)

	  action = act_grab_body(st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
--		action:add_precondition(world_property(stalker_ids.property_danger,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
--	  action:add_precondition(world_property(blowout_scheme.evid_anomaly,false))
--	  action:add_precondition(world_property(blowout_scheme.evid_blowout,false))
	  action:add_precondition(world_property(evid_see_stuff,true))
	  action:add_precondition(world_property(evid_see_body,true))
	  action:add_precondition(world_property(evid_near_stuff,true))
--	  action:add_precondition(world_property(evid_position_corrected,true))
	  action:add_effect(world_property(evid_near_stuff, false))
	  action:add_effect(world_property(evid_see_stuff, false))
	  action:add_effect(world_property(evid_see_body,false)) -- переключаемся на подъём вещички
	  manager:add_action (actid_grab_body, action)

	  action = act_reach_item("act_reach_item", st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
	  action:add_precondition(world_property(prop_contact,false))
--		action:add_precondition(world_property(stalker_ids.property_danger,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
--	  action:add_precondition(world_property(blowout_scheme.evid_anomaly,false))
--	  action:add_precondition(world_property(blowout_scheme.evid_blowout,false))
	  action:add_precondition(world_property(evid_see_stuff,true))
	  action:add_precondition(world_property(evid_near_stuff,false))
	  action:add_precondition(world_property(prop_idlecombat,true))
	  action:add_effect (world_property(evid_near_stuff, true))
	  manager:add_action (actid_reach_item, action)
		
	  action = manager:action(xr_actions_id.alife) 
	  action:add_precondition(world_property(evid_see_stuff,false))
    action = manager:action(stalker_ids.action_danger_planner)
	  action:add_precondition(world_property(evid_see_stuff,false))
--    action:add_precondition(world_property(evid_near_stuff,false))
--	  action = manager:action(xr_actions_id.stohe_kamp_base + 1) 
--	  action:add_precondition(world_property(evid_see_stuff,false))
--	  action = manager:action(xr_actions_id.stohe_kamp_base + 3) 
--	  action:add_precondition(world_property(evid_see_stuff,false))
		
--	  action = manager:action(xr_actions_id.stohe_meet_base+1) 
--	  action:add_precondition(world_property(evid_see_stuff,false))	
	end
end

function set_scheme(npc, ini, scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
  st.ini=ini
end